;;; -*- lisp -*-
(in-package :clfswm)

;; thanks to this fellow https://github.com/alesguzik/home/blob/master/.clfswmrc

(load-contrib "volume-mode.lisp")
(load-contrib "amixer.lisp")

(setf *volume-mode-timeout* 1)
;; completely stolen
 (defun eval-in-frame (frame fun &optional (at 0) till)
  (let ((old-current-child *current-child*))
    (add-timer at
               (lambda ()
                 (setf *current-child* frame)
                 (show-all-children)
                 (funcall fun)
                 ))
    (when till
      (add-timer till
                 (lambda ()
                   (setf *current-child* old-current-child))))
  (values)))

;;completely stolen
(defun shell-in-frame (frame cmd &optional (at 0) till)
  (eval-in-frame frame (lambda () (do-shell cmd)) at till))

;;completely stolen
(defun execute-in-frame (frame cmd args &optional (at 0) till)
  (eval-in-frame frame (lambda () (do-execute cmd args)) at till))

;; frame hooks
(defmacro create-my-named-frame-nw-hook (name class)
  "make a frame hook function"
  `(defun ,name (&optional (frame *current-child*))
     (when (frame-p frame)
       (setf (frame-nw-hook frame) 'absorb-window-nw-hook
             (frame-data-slot frame :nw-absorb-test) (nw-absorb-test-class ,class)))))

(defmacro create-my-named-frame-nw-hooks (&rest hooks)
  "make frame hooks, basically saves typing"
  (let ((hs (mapcar #'(lambda (h) (cons 'create-my-named-frame-nw-hook h)) hooks)))
    `(progn ,@hs)))

(create-my-named-frame-nw-hooks
  (firefox-my-frame-nw-hook "Navigator")
  (emacs-my-frame-nw-hook "emacs")
  (urxvt-my-frame-nw-hook "urxvt")
  (urxvt2-my-frame-nw-hook "URxvt"))
  

;;mainly stolen, not sure if this way to autostart things is a good idea
(defun my-init-hook ()
  (dbg 'my-init-hook)
  (setf (frame-layout *root-frame*) #'tile-space-layout
        (frame-data-slot *root-frame* :tile-space-size) 0.05
        (frame-data-slot *root-frame* :tile-layout-keep-position) :yes)
  (let* (
         (terms-frame (add-frame
                                (create-frame
                                 :name "Terms"
                                 :layout #'tile-layout-mix
                                 :data (list '(:tile-layout-keep-position :yes)))
                                *root-frame*))
;;         (mail-frame (add-frame (create-frame :name "Mail"
;;                                              :layout #'maximize-layout)
;;                                communications-frame))
         (web-frame (add-frame (create-frame
                                 :name "Web"
                                 :layout #'maximize-layout
                                 :data (list '(:tile-layout-keep-position :yes)
                                             '(:tile-space-size 0.05)))
                                *root-frame*))
         (learn-frame (add-frame (create-frame
                                  :name "Learn"
                                  :layout #'maximize-layout)
                                 *root-frame*))
         (code-frame (add-frame (create-frame
                                 :name "Code"
                                 :layout #'main-window-left-layout
                                 :data (list '(:tile-size 0.2)))
                                *root-frame*))
         )
    (emacs-my-frame-nw-hook code-frame)
    (firefox-my-frame-nw-hook web-frame)
    (urxvt-my-frame-nw-hook terms-frame)
    (urxvt2-my-frame-nw-hook terms-frame)
    (shell-in-frame web-frame "firefox" 1)
    (shell-in-frame terms-frame "urxvt -e tmux" 5)))

(setf *init-hook* '(my-init-hook))

;; very uncool better make a macro or wrapper function

(defmacro add-my-run-or-raise-fn (name class cmd)
  "make a run-or-raise-fn"
  `(defun ,name ()
     (run-or-raise (lambda (win) (string-equal ,class
                                               (xlib:get-wm-class win)))
                   (lambda () (do-shell ,cmd)))))

(defmacro add-my-run-or-raise-fns (&rest rors)
  "make run-or-raise fns, basically saves typing"
  (let ((rs (mapcar #'(lambda (r) (cons 'add-my-run-or-raise-fn r)) rors)))
    `(progn ,@rs)))

(add-my-run-or-raise-fns
 (start-emacs "emacs" "cd $HOME && exec emacsclient -c")
 (start-firefox "Navigator" "cd $HOME && exec firefox")
 (start-urxvt "urxvt" "cd $HOME && exec urxvt")
 (start-qbittorrent "qbittorrent" "exec qbittorrent")
 (start-gogglesmm "gogglesmm" "gogglesmm"))

;; (defmacro defkey-main (keys fn)
;;   `(define-main-key ,keys ,fn))

;; (defmacro defkeys-main (&rest keys)
;;   (let ((ks (mapcar #'(lambda (k) (cons 'defkey-main k)) keys)))
;;     `(progn ,@ks)))
 
;; (defmacro defkey-second (keys fn)
;;   `(define-second-key ,keys ,fn))

;; (defmacro defkeys-second (&rest keys)
;;   (let ((ks (mapcar #'(lambda (k) (cons 'defkey-second k)) keys)))
;;     `(progn ,@ks)))

(defmacro defkeys ((mode) &body keys)
  (let ((symb (intern (format nil "DEFINE-~A-KEY" mode))))
    `(progn
       ,@(loop for k in keys collect `(,symb ,@k)))))

;;thanks to Philipp Brochard
(defun set-some-keys ()
 (defkeys (main)
   (("f" :mod-1) 'start-emacs)
   (("l" :mod-1) 'expose-all-windows-mode)
   (("u" :mod-1) 'expose-windows-mode)
   (("w" :mod-4) 'start-firefox)
   (("2" :mod-4) 'start-gogglesmm)
   (("Return" :mod-4) 'start-urxvt)))

;;(defun set-some-keys ()
;;  (defkeys-main
;;    (("f" :mod-1) 'start-emacs)
;; (("l" :mod-1) 'expose-all-windows-mode)
;; (("u" :mod-1) 'expose-windows-mode)
;; (("w" :mod-4) 'start-firefox)
;; (("Return" :mod-4) 'start-urxvt)
;; (("2" :mod-4) 'start-gogglesmm)
;;  (defkeys-second
;;    (("g") 'sm-ask-close/kill-current-window)

(add-hook *binding-hook* 'set-some-keys)

